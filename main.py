# main.py

import asyncio
import json
from typing import Dict
import datetime
import importlib

from telethon import TelegramClient, events
from telethon.errors import FloodWaitError
from telethon.sessions import StringSession
from telethon.tl.functions.channels import JoinChannelRequest

from src.deduplicator import Deduplicator
from src.llm_classifier import classify_department, rate_engagement
from src.logger import log_action, log_error
from src.router import get_target_channel
from src.summarizer import summarize_text
from src.processor import handle_entry, batcher, deduper

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
with open('config/config.json', 'r', encoding='utf-8-sig') as config_file:
    config = json.load(config_file)

# –°–ª–æ–≤–∞—Ä—å: –∏–º—è –∫–∞–Ω–∞–ª–∞ -> ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
last_ids: Dict[str, int] = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π
interval = config.get('batch_interval_minutes', 10)


# –°–æ–∑–¥–∞–Ω–∏–µ Telethon –∫–ª–∏–µ–Ω—Ç–∞ (user.session)
session_name = config.get('session_file', 'user.session')
client = TelegramClient(
    session_name,
    api_id=config['api_id'],
    api_hash=config['api_hash'],
)


async def handle_message(msg, chat_username: str):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:
    - –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è
    - —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è
    - –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è (–Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤)
    - –æ—Ü–µ–Ω–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ—Å—Ç–∏
    - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å batcher
    """
    text = getattr(msg, 'message', msg.text) or ""
    if not text:
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    last_ids[chat_username] = msg.id

    # –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –¥—É–±–ª–∏–∫–∞—Ç
    if deduper.is_duplicate(text):
        return
    deduper.add(text)

    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
    link = f"https://t.me/{chat_username}/{msg.id}"
    log_action('GET', text, f"@{chat_username}")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤ (>=1 —ç–ª–µ–º–µ–Ω—Ç)
    departments = classify_department(text)
    print(departments)
    if departments == ['–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏']:
        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, —Ö–æ—Ç—è –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º ['–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏']
        return
    print(departments)
    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞ –¥–µ–ª–∞–µ–º —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é –∏ –æ—Ü–µ–Ω–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ batcher
    for dept in departments:
        summary    = summarize_text(text, dept)
        print(summary)

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ç–æ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
        if not summary or "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç" in summary:
            continue

        engagement = rate_engagement(text, str(dept))
        print(engagement)

        payload = (
            f"{summary or text[:200] + '‚Ä¶'}\n\n"
            f"üîó –û—Ä–∏–≥–∏–Ω–∞–ª: {link}\n"
            f"üëÄ –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ—Å—Ç—å: {engagement}\n"
        )
        target = get_target_channel(dept)
        batcher.add(payload, target, engagement)


@client.on(events.NewMessage(chats=config['source_channels']))
async def forward(event):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
    username = event.chat.username or str(event.chat.id)
    await handle_message(event.message, username)


async def refill_missed():
    """
    –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –¥–æ–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    –ø—Ä–∏ –∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–∞–∑—Ä—ã–≤–∞—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    """
    await client.connect()
    interval_sec = config.get('refill_interval_seconds', 60)

    while True:
        await asyncio.sleep(interval_sec)
        total_new = 0

        for channel in config['source_channels']:
            uname = channel.lstrip('@')
            try:
                entity = await client.get_entity(uname)
                last_id = last_ids.get(uname, 0)
                new_count = 0

                async for msg in client.iter_messages(entity, min_id=last_id):
                    await handle_message(msg, uname)
                    new_count += 1

                if new_count:
                    print(f"[REFILL] {channel}: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {new_count} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
                total_new += new_count

            except Exception as error:
                print(f"[REFILL ERROR] {channel}: {error}")

        if total_new:
            print(f"[REFILL] –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {total_new} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Ü–∏–∫–ª")


async def init_last_ids():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä—è last_ids: —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
    """
    for channel in config['source_channels']:
        uname = channel.lstrip('@')
        try:
            entity = await client.get_entity(uname)
            messages = await client.get_messages(entity, limit=1)
            last_ids[uname] = messages[0].id if messages else 0
            print(f"[INIT] {channel}: last_id = {last_ids[uname]}")
        except Exception as error:
            print(f"[INIT ERROR] {channel}: {error}")
            last_ids[uname] = 0

async def daily_cleanup():
    """
    –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –ø–æ–ª–Ω–æ—á—å –æ—á–∏—â–∞–µ—Ç —Ñ–∞–π–ª –æ—á–µ—Ä–µ–¥–∏.
    """
    path = config.get('news_file', 'logs/queue_for_distribution.json')
    while True:
        now = datetime.datetime.now()
        # —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º, —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ª—É–Ω–æ—á–∏
        tomorrow = (now + datetime.timedelta(days=1)).replace(
            hour=0, minute=0, second=0, microsecond=0
        )
        wait_secs = (tomorrow - now).total_seconds()
        await asyncio.sleep(wait_secs)

        # —á–∏—Å—Ç–∏–º —Ñ–∞–π–ª
        try:
            with open(path, 'w', encoding='utf-8') as f:
                json.dump([], f, ensure_ascii=False, indent=2)
            print(f"[CLEANUP] {path} –æ—á–∏—â–µ–Ω –≤ {tomorrow.date()}")
        except Exception as e:
            print(f"[CLEANUP ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å {path}: {e}")
        # —Å—Ä–∞–∑—É –ø–µ—Ä–µ–π–¥—ë–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ (—Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ª—É–Ω–æ—á–∏)


async def poll_parser():
    from src.parsers.iabir_lenta_parser import parse
    interval = config.get("parser_interval_seconds", 600)

    while True:
        entries = await parse()
        for e in entries:
            await handle_entry(e)
        await asyncio.sleep(interval)


async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è:
    - –∑–∞–ø—É—Å–∫ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è last_ids
    - –∑–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á refill –∏ batcher
    - –æ–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    print("–ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è‚Ä¶")
    await client.start(phone=config['phone'])
    print("‚úÖ –°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞")

    print(f"[BATCH] –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏: {interval} –º–∏–Ω")
    await init_last_ids()

    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö —Ç–∞—Å–∫–æ–≤
    asyncio.create_task(refill_missed())
    asyncio.create_task(daily_cleanup())
    await batcher.start(client)
    print('üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...')

    asyncio.create_task(poll_parser())
    await client.run_until_disconnected()


if __name__ == '__main__':
    asyncio.run(main())